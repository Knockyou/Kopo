#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MIN_YEAR 2010
#define MAX_YEAR 2025
#define START_YEAR 1800
#define START_DAY 3
#define TIME_YEAR 1900

typedef enum eMonth 
{ 
    Jan = 1, 
    Feb, 
    Mar, 
    Apr, 
    May, 
    Jun, 
    Jul, 
    Aug, 
    Sep, 
    Oct, 
    Nov, 
    Dec
} MONTH;

typedef enum eDay 
{
    Sun = 0, 
    Mon, 
    Tue, 
    Wed, 
    Thu,
    Fri, 
    Sat
} DAY;

const int OrdinaryYearDay[Dec + 1] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 평년
const int     LeapYearDay[Dec + 1] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; // 윤년

void PrintMonth(int* monthPtr)
{
    switch(*monthPtr)
    {
        case Jan:
            printf("Jan");
        break;
        case Feb:
            printf("Feb");
        break;
        case Mar:
            printf("Mar");
        break;
        case Apr:
            printf("Apr");
        break;
        case May:
            printf("May");
        break;
        case Jun:
            printf("Jun");
        break;
        case Jul:
            printf("Jul");
        break;
        case Aug:
            printf("Aug");
        break;
        case Sep:
            printf("Sep");
        break;
        case Oct:
            printf("Oct");
        break;
        case Nov:
            printf("Nov");
        break;
        case Dec:
            printf("Dec");
        break;
        
    }
}

// Leap Year is 1 return
int isLeapYear(int year) {return (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0));}


int StartDay(int* yearPtr, int* monthPtr)
{
    int total = 0;
    
    for(int i = START_YEAR; i < *yearPtr; i++)
    {
        if(isLeapYear(i))
        {
            total += 366;
        }
        else
        {
            total += 365;
        }
    }
    
    for(int i = 1; i < *monthPtr; i++)
    {
        if(isLeapYear(i))
        {
            total += LeapYearDay[i];
        }
        else
        {
            total += OrdinaryYearDay[i];
        }
    }
    
    return (START_DAY + total) % (Sat + 1);
}


int SearchMonthofCalendar(int* yearPtr, int* monthPtr)
{
    printf("year를 입력하세요>"); // 2025
    if (!scanf("%d", yearPtr)) 
    {
        printf("정수형으로 입력 바람");
    	return 0;
    }
    while(getchar() != '\n');
    if(*yearPtr < MIN_YEAR || *yearPtr > MAX_YEAR)
    {
        printf("2020 ~ 2025 년도를 입력 해주세요");
        return 0;
    }
    
    
    printf("month를 입력하세요>"); // 1
    if (!scanf("%d", monthPtr)) 
    {
        printf("정수형으로 입력 바람");
    	return 0;
    }
    while(getchar() != '\n');
    
    if(*monthPtr < Jan || *monthPtr > Dec)
    {
        printf("1 ~ 12달을 입력 해주세요");
        return 0;
    }
    
    return 1;
}

void PrintCalendar(int* yearPtr, int* monthPtr)
{
    printf("year : %d\n", *yearPtr);
    printf("month : %d\n", *monthPtr);
    printf("%d ", *yearPtr);
    PrintMonth(monthPtr);
    printf("\n");
    printf("-----------------------------\n");
    printf(" Sun Mon Tue Wed Thu Fri Sat\n");
    
    int startDay = StartDay(yearPtr, monthPtr);
    int lastDay = isLeapYear(*yearPtr) ? LeapYearDay[*monthPtr] : OrdinaryYearDay[*monthPtr];
    for(int i = 0; i < startDay; i++)
    {
        printf("    ");
    }
    
    for(int i = 1; i <= lastDay; i++)
    {
        printf("%4d", i);
        if((i + startDay) % 7 == 0)
        {
            printf("\n");
        }
    }
}

void PrintDDayCalc(int* ddayPtr)
{
    printf("년월 YYYYMMDD 를 입력하세요>"); // 2025
    if (!scanf("%d", ddayPtr)) 
    {
        printf("정수형으로 입력 바람");
    	return;
    }
    while(getchar() != '\n');
    
    time_t t = time(NULL);
    struct tm tm = *localtime(&t);
    int inDate = (TIME_YEAR + tm.tm_year) + (tm.tm_mon + 1) + tm.tm_day;
    if(inDate < *ddayPtr)
    {
        printf("오늘 보다 큰 날짜를 입력 하세요");
        return;
    }
    
    
}

int main() 
{
    int *year;
    int *month;
    int *dDay;
    if (!SearchMonthofCalendar(year, month)) {
        printf("\nSearchMonthofCalendar 동작 안함");
        return 0;
    } else {
        PrintCalendar(year, month);
        PrintDDayCalc(dDay);
    }
}
